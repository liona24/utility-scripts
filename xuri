#!/usr/bin/python3
"""
A simple URI encoder / decoder.

By default it replaces the clipboard (requires xclip).

You may also pipe input to stdin.
"""
import sys
import argparse
import subprocess
import urllib.parse


def quote_clip(quoter):
    p = subprocess.run(['xclip', '-o', '-selection', 'clipboard'], stdout=subprocess.PIPE)
    if p.returncode != 0:
        sys.exit(p.returncode)

    inp = p.stdout.decode("utf-8")
    out = quoter(inp).encode('utf-8')

    p = subprocess.run(['xclip', '-selection', 'clipboard'], input=out)
    sys.exit(p.returncode)


if __name__ == '__main__':
    args = argparse.ArgumentParser(description="Encode / Decode URIs or URI components")
    args.add_argument("-d", "--decode", action="store_true", help="Set this flag to decode instead of encode")
    args.add_argument("-c", "--component", action="store_true", help="Set this flag to set mode to encode URI component")
    args.add_argument("-p", "--plus", action="store_true", help="Set this flag to encode/decode spaces as '+'")

    args = args.parse_args()

    name = "quote"
    if args.plus:
        name += "_plus"

    if args.decode:
        name = "un" + name

    def quoter(inp):
        if args.decode:
            return getattr(urllib.parse, name)(inp)
        else:
            if args.component:
                safe = '~()*!.\''
            else:
                safe = '~@#$&()*!+=:;,.?/\''
            return getattr(urllib.parse, name)(inp, safe=safe)

    if not sys.stdin.isatty():
        while True:
            inp = sys.stdin.read(1024)
            if len(inp) == 0:
                break

            inp = inp.decode("utf-8")
            print(quoter(inp), end="", flush=True)
    else:
        quote_clip(quoter)
